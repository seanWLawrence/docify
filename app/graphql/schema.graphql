type Document implements Node {
  createdAt: TimeStamp!
  id: ID!

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node
  private: Boolean!
  title: String!
  updatedAt: TimeStamp!
  user(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection!
  userId: ID!
}

# The connection type for Document.
type DocumentConnection {
  # A list of edges.
  edges: [DocumentEdge]

  # A list of nodes.
  nodes: [Document]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type DocumentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Document
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query implements Node {
  # Find a specific document by id
  document(id: ID!): Document!

  # Find all documents, or all documents for a specific user
  documents(userId: ID = null): [Document!]!
  id: ID!

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node

  # Fetches a list of objects given a list of IDs.
  nodes(
    # IDs of the objects.
    ids: [ID!]!
  ): [Node]!

  # Find a specific user by id
  user(userId: ID!): User!
  users: [User!]!
  viewer: User
}

# Date and time in ISO 8601
scalar TimeStamp

type User implements Node {
  createdAt: TimeStamp!
  documents(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): [DocumentConnection!]
  email: String!
  encryptedPassword: String!
  id: ID!

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node
  rememberCreatedAt: TimeStamp
  resetPasswordSentAt: TimeStamp
  resetPasswordToken: String
  updatedAt: TimeStamp!
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]

  # A list of nodes.
  nodes: [User]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User
}